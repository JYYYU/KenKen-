import check
import copy   

class Puzzle:
    '''
    Fields:
            size: Nat 
            board: (listof (listof (anyof Str Nat Guess))
            constraints: (listof (list Str Nat (anyof '+' '-' '*' '/' '='))))
    requires: See Assignment Specifications
    '''
    
    def __init__(self, size, board, constraints):
        self.size=size
        self.board=board
        self.constraints=constraints
        
    def __eq__(self, other):
        return (isinstance(other,Puzzle)) and \
            self.size==other.size and \
            self.board == other.board and \
            self.constraints == other.constraints
    
    def __repr__(self):
        s='Puzzle(\nSize='+str(self.size)+'\n'+"Board:\n"
        for i in range(self.size):
            for j in range(self.size):
                if isinstance(self.board[i][j],Guess):
                    s=s+str(self.board[i][j])+' '
                else:
                    s=s+str(self.board[i][j])+' '*7
            s=s+'\n'
        s=s+"Constraints:\n"
        for i in range(len(self.constraints)):
            s=s+'[ '+ self.constraints[i][0] + '  ' + \
                str(self.constraints[i][1]) + '  ' + self.constraints[i][2]+ \
                ' ]'+'\n'
        s=s+')'
        return s    

class Guess:
    '''
    Fields:
            symbol: Str 
            number: Nat
    requires: See Assignment Specifications
    '''        
    
    def __init__(self, symbol, number):
        self.symbol=symbol
        self.number=number
        
    def __repr__(self):
        return "('{0}',{1})".format(self.symbol, self.number)
    
    def __eq__(self, other):
        return (isinstance(other, Guess)) and \
            self.symbol==other.symbol and \
            self.number == other.number        

class Posn:
    '''
    Fields:
            x: Nat 
            y: Nat
    requires: See Assignment Specifications
    '''         
    
    def __init__(self,x,y):
        self.x=x
        self.y=y
    
    def __repr__(self):
        return "({0},{1})".format(self.x, self.y)
    
    def __eq__(self,other):
        return (isinstance(other, Posn)) and \
            self.x==other.x and \
            self.y == other.y 
    
    

## Constants used for tests
    
puzzle1 = Puzzle(4, [['a','b','b','c'],
                     ['a','d','e','e'],
                     ['f','d','g','g'],
                     ['f','h','i','i']],
                 [['a', 6,'*'],
                  ['b',3,'-'],
                  ['c',3,'='],
                  ['d',5,'+'],
                  ['e',3,'-'],
                  ['f',3, '-'],
                  ['g',2,'/'],
                  ['h',4,'='],
                  ['i',1,'-']])

puzzle1partial=Puzzle(4, [['a','b','b','c'],
                          ['a',2,1,4],
                          ['f',3,'g','g'],
                          ['f','h','i','i']],
                      [['a', 6,'*'],
                       ['b',3,'-'],
                       ['c',3,'='],
                       ['f',3, '-'],
                       ['g',2,'/'],
                       ['h',4,'='],
                       ['i',1,'-']])

# a partial solution to puzzle1 with a cage partially filled in
puzzle1partial2=Puzzle(4, [[Guess('a',2),'b','b','c'],
                          ['a',2,1,4],
                          ['f',3,'g','g'],
                          ['f','h','i','i']],
                      [['a', 6,'*'],
                       ['b',3,'-'],
                       ['c',3,'='],
                       ['f',3, '-'],
                       ['g',2,'/'],
                       ['h',4,'='],
                       ['i',1,'-']])

# a partial solution to puzzle1 with a cage partially filled in
#   but not yet verified 
puzzle1partial3=Puzzle(4, [[Guess('a',2),'b','b','c'],
                          [Guess('a',3),2,1,4],
                          ['f',3,'g','g'],
                          ['f','h','i','i']],
                      [['a', 6,'*'],
                       ['b',3,'-'],
                       ['c',3,'='],
                       ['f',3, '-'],
                       ['g',2,'/'],
                       ['h',4,'='],
                       ['i',1,'-']])

# The solution to puzzle 1
puzzle1soln=Puzzle(4, [[2,1,4,3],[3,2,1,4],[4,3,2,1],[1,4,3,2]], [])

puzzle2=Puzzle(6,[['a','b','b','c','d','d'],
                  ['a','e','e','c','f','d'],
                  ['h','h','i','i','f','d'],
                  ['h','h','j','k','l','l'],
                  ['m','m','j','k','k','g'],
                  ['o','o','o','p','p','g']],
               [['a',11,'+'],
                ['b',2,'/'],
                ['c',20,'*'],
                ['d',6,'*'],
                ['e',3,'-'],
                ['f',3,'/'],
                ['g',9,'+'],
                ['h',240,'*'],
                ['i',6,'*'],
                ['j',6,'*'],
                ['k',7,'+'],
                ['l',30,'*'],
                ['m',6,'*'],
                ['o',8,'+'],
                ['p',2,'/']])
                
#  The solution to puzzle 2
puzzle2soln=Puzzle(6,[[5,6,3,4,1,2],
                      [6,1,4,5,2,3],
                      [4,5,2,3,6,1],
                      [3,4,1,2,5,6],
                      [2,3,6,1,4,5],
                      [1,2,5,6,3,4]], [])


puzzle3=Puzzle(2,[['a','b'],['c','b']],[['b',3,'+'],
                                       ['c',2,'='],
                                       ['a',1,'=']])

puzzle3partial=Puzzle(2,[['a',Guess('b',1)],['c',Guess('b',2)]],
                      [['b',3,'+'],
                       ['c',2,'='],
                       ['a',1,'=']])
                  
puzzle3soln=Puzzle(2,[[1,2],[2,1]],[])         

test = Puzzle(3,[['a','a',3],['a',Guess('b',1),2],['a',Guess('b',3),1]],\
              [['b',3,'/'],['a',8,'+']])
testi = Puzzle(2,[[Guess('a',2),Guess('a',1)],
                                          [Guess('a',1),Guess('a',2)]],
                                       [['a',4,'/']])
                  

def read_puzzle(fname):
    f = open(fname,'r')
    size = int(f.readline())
    board = []
    con = []
    new = []
    puzzle = f.readline().split()
    nxn = len(puzzle)
    i = 1
    while puzzle != []:
        if i <= nxn:
            board.append(puzzle)
            i += 1
            puzzle = f.readline().split()
        else:
            new.append(puzzle[0])
            new.append(int(puzzle[1]))
            new.append(puzzle[2])
            con.append(new)
            new = []
            puzzle = f.readline().split()
    f.close()
    return Puzzle(size,board,con)      
     



def print_sol(puz, fname):
    f = open(fname,'w')
    board = puz.board
    for i in board:
        line = "  ".join(list(map(lambda x: str(x), i)))
        line = line + "  " + '\n'
        f.write(line)
    f.close()
    return None   



def sifti(board,letter,hold):
    for row in board:
        rowg = list(filter(lambda x: x == letter,row))
        hold.extend(rowg)
    return hold            



def find_blank(puz):
    board = puz.board
    test = 0
    testi = 0
    con = puz.constraints
    while test != 1:
        if con == []:
            return False
        else:
            letter = con[0][0]
            test += 1
    else:
        val = sifti(board,letter,[]) 
        if val != []:
                for row in range(len(board)):
                    for x in range(len(board[0])):
                        if board[row][x] == letter:
                            return Posn(x,row)                        
        else:
            return 'guess'
     


def used_in_row(puz,pos):
    new = []
    board = puz.board
    row = pos.y
    look = board[row]
    for x in look:
        if type(x) == int:
            new.append(x)
        elif type(x) == Guess:
            new.append(x.number)
    return sorted(new)
            



def used_in_col(puz,pos):
    new = []
    board = puz.board
    col = pos.x
    for x in board:
        if type(x[col]) == int:
            new.append(x[col])
        elif type(x[col]) == Guess:
            new.append(x[col].number)
    return sorted(new)
   


def available_vals(puz,pos):
    size = puz.size
    board = puz.board
    rows = used_in_row(puz,pos)
    col = used_in_col(puz,pos)
    total = col+rows
    com = list(range(1,size+1))
    new = []
    avail = list(filter(lambda x: x not in total, com))
    return sorted(avail)

def place_guess(brd,pos,val):
    res=copy.deepcopy(brd)  # a copy of brd is assigned to res without any 
                            # aliasing to avoid mutation of brd. 
                            #  You should update res and return it
    letter = res[pos.y][pos.x]
    res[pos.y][pos.x] = Guess(letter,val)
    return res



def fill_in_guess(puz, pos, val):
    res=Puzzle(puz.size, copy.deepcopy(puz.board), 
               copy.deepcopy(puz.constraints))
    tmp=copy.deepcopy(res.board)
    res.board=place_guess(tmp, pos, val)
    return res
           


def sift(board,letter,hold):
    for row in board:
        rowg = list(filter(lambda x: type(x) == Guess,row))
        vali = list(map(lambda y: y.number, rowg))
        hold.extend(vali)
    return hold            


def det(hold,size,row,col,aim,op,board,new):
    if op == '-':
        if size>=row>=0 and size>=col-1>=0 and type(board[row][col-1]) == Guess:
            if abs(board[row][col-1].number - hold) == aim:
                new.append(True)
            else:
                new.append(False)
        if size>=row>=0 and size>=col+1>=0 and type(board[row][col+1]) == Guess:
            if abs(board[row][col+1].number - hold) == aim:
                new.append(True)
            else:
                new.append(False)                
        if size>=row+1>=0 and size>=col>=0 and type(board[row+1][col]) == Guess:
            if abs(board[row+1][col].number - hold) == aim:
                new.append(True)
            else:
                new.append(False)                  
        if size>=row-1>=0 and size>=col>=0 and type(board[row-1][col]) == Guess:
            if abs(board[row-1][col].number - hold) == aim:
                new.append(True)
            else:
                new.append(False)                      
    else:
        if size>=row>=0 and size>=col-1>=0 and type(board[row][col-1]) == Guess:
            if board[row][col-1].number // hold == aim or \
               hold // board[row][col-1].number == aim:
                new.append(True)
            else:
                new.append(False)
        if size>=row>=0 and size>=col+1>=0 and type(board[row][col+1]) == Guess:
            if board[row][col+1].number // hold == aim or \
               hold // board[row][col+1].number == aim:
                new.append(True)
            else:
                new.append(False)              
        if size>=row+1>=0 and size>=col>=0 and type(board[row+1][col]) == Guess:
            if board[row+1][col].number // hold == aim or \
               hold // board[row+1][col].number == aim:
                new.append(True)
            else:
                new.append(False)                   
        if size>=row-1>=0 and size>=col>=0 and type(board[row-1][col]) == Guess:
            if board[row-1][col].number // hold == aim or \
               hold // board[row-1][col].number == aim:
                new.append(True)
            else:
                new.append(False)  
    return new


def guess_valid(puz):
    size = puz.size
    board = puz.board
    letter = puz.constraints[0][0]
    op = puz.constraints[0][2]
    aim = puz.constraints[0][1]
    newest = []
    product = 1
    if op == '=':
        chek = sift(board,letter,[])
        if chek == list(filter(lambda x: x == aim,chek)):
            return True
        else:
            return False
    elif op == '/' or op == '-':
        for row in range(len(board)):
            for i in range(len(board[0])):
                if type(board[row][i]) == Guess:
                    hold = board[row][i].number
                    newest.extend(det(hold,size-1,row,i,aim,op,board,[]))
        if False in newest:
            return False
        else:
            return True
    elif op == '+' or op == '*':
        val = sift(board,letter,[])
        if op == '+' and sum(val) == aim:
            return True
        if op == '*':
            for x in val:
                product = product * x
            if product == aim:
                return True
        else:
            return False
                   

def apply_guess(puz):
    # a copy of puz is assigned to res without any 
    # aliasing to avoid mutation of puz. 
    #  You should update res and return it    
    res=Puzzle(puz.size, copy.deepcopy(puz.board), 
               copy.deepcopy(puz.constraints))   
    board = res.board
    con = res.constraints
    for row in range(len(board)):
        for i in range(len(board[0])):
            if type(board[row][i]) == Guess:
                board[row][i] = board[row][i].number
    con.pop(0)
    return res
                

                            

def neighbours(puz):
    # a copy of puz is assigned to tmp without any 
    # aliasing to avoid mutation of puz. 
    tmp=Puzzle(puz.size, copy.deepcopy(puz.board), 
               copy.deepcopy(puz.constraints))
    size = tmp.size
    con = tmp.constraints
    board = tmp.board
    final = []   
    if find_blank(tmp) == 'guess':
        if guess_valid(tmp):
            final.append(apply_guess(tmp))
    elif type(find_blank(tmp)) == Posn:
        letter = con[0][0]
        posin = find_blank(tmp)
        value = available_vals(tmp,posin) 
        for x in value:
            construct = fill_in_guess(tmp,posin,x)
            final.append(construct)
    return final


def solve_kenken(orig):
    to_visit=[]
    visited=[]
    to_visit.append(orig)
    while to_visit!=[] :
        if find_blank(to_visit[0])==False:
            return to_visit[0]
        elif to_visit[0] in visited:
            to_visit.pop(0)
        else:
            nbrs = neighbours(to_visit[0])
            new = list(filter(lambda x: x not in visited, nbrs))
            new_to_visit=new + to_visit[1:] 
            new_visited= [to_visit[0]] + visited
            to_visit=new_to_visit
            visited=new_visited    
    return False

check.expect("game1",solve_kenken(puzzle3partial),False)
check.expect("game2",solve_kenken(puzzle1), puzzle1soln)
check.expect("game3",solve_kenken(puzzle2), puzzle2soln)
check.expect("game4",solve_kenken(puzzle3), puzzle3soln)
check.expect("game5",solve_kenken(puzzle3soln), puzzle3soln)
